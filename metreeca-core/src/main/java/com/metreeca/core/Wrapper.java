/*
 * Copyright Â© 2013-2020 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca/Link.
 *
 * Metreeca/Link is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca/Link is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca/Link.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.core;


import java.util.function.*;

import static com.metreeca.core.Handler.handler;
import static java.util.Objects.requireNonNull;


/**
 * Handler wrapper {thread-safe}.
 *
 * <p>Inspects and possibly alters {@linkplain Request requests} and {@linkplain Response responses} processed and
 * generated by resource {@linkplain Handler handlers}.</p>
 *
 * <p><strong>Warning</strong> / Implementations must be thread-safe.</p>
 */
@FunctionalInterface public interface Wrapper {

	/**
	 * Creates a conditional wrapper.
	 *
	 * @param test the request predicate used to decide if requests and responses are to be routed through the wrapper
	 * @param pass the wrapper requests and responses are to be routed through when {@code test} evaluates to {@code
	 *             true} on the request
	 *
	 * @return a conditional wrapper that routes requests and responses through the {@code pass} handler if the {@code
	 * test} predicate evaluates to {@code true} on the request or to a dummy wrapper
	 * otherwise
	 *
	 * @throws NullPointerException if either {@code test} or {@code pass} is null
	 */
	public static Wrapper wrapper(final Predicate<Request> test, final Wrapper pass) {

		if ( test == null ) {
			throw new NullPointerException("null test predicate");
		}

		if ( pass == null ) {
			throw new NullPointerException("null pass wrapper");
		}

		return wrapper(test, pass, handler -> handler);
	}

	/**
	 * Creates a conditional wrapper.
	 *
	 * @param test the request predicate used to select the wrapper requests and responses are to be routed through
	 * @param pass the wrapper requests and responses are to be routed through when {@code test} evaluates to {@code
	 *             true} on the request
	 * @param fail the wrapper requests and responses are to be routed through when {@code test} evaluates to {@code
	 *             false} on the request
	 *
	 * @return a conditional wrapper that routes requests and responses either through the {@code pass} or the {@code
	 * fail} wrapper according to the results of the {@code test} predicate
	 *
	 * @throws NullPointerException if any of the arguments is null
	 */
	public static Wrapper wrapper(final Predicate<Request> test, final Wrapper pass, final Wrapper fail) {

		if ( test == null ) {
			throw new NullPointerException("null test predicate");
		}

		if ( pass == null ) {
			throw new NullPointerException("null pass wrapper");
		}

		if ( fail == null ) {
			throw new NullPointerException("null fail wrapper");
		}

		return handler -> handler(test, pass.wrap(handler), fail.wrap(handler));
	}


	/**
	 * Creates a request wrapper.
	 *
	 * @param mapper a request mapping function; must return a non-null value
	 *
	 * @return a wrapper that pre-process requests using {@code mapper}
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public static Wrapper preprocessor(final Function<Request, Request> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> handler.handle(
				requireNonNull(mapper.apply(request), "null mapper return value")
		);
	}

	/**
	 * Creates a request body wrapper.
	 *
	 * @param <V>    the type of the request body to be pre-processed
	 * @param format the format of the request body to be pre-processed
	 * @param mapper the request body mapper; takes as argument a request and its {@code format} body and must return
	 *               a non-null updated value
	 *
	 * @return a wrapper that pre-process request {@code format} bodies using {@code mapper}
	 *
	 * @throws NullPointerException if either {@code format} or {@code mapper} is null
	 */
	public static <V> Wrapper preprocessor(
			final Format<V> format, final BiFunction<? super Request, ? super V, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> request.body(format).fold(request::reply, value -> handler.handle(
				request.body(format, requireNonNull(mapper.apply(request, value), "null mapper return value"))
		));
	}


	/**
	 * Creates a response wrapper.
	 *
	 * @param mapper a response mapping function; must return a non-null value
	 *
	 * @return a wrapper that post-process responses using {@code mapper}
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public static Wrapper postprocessor(final Function<Response, Response> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> handler.handle(request).map(response ->
				requireNonNull(mapper.apply(response), "null mapper return values")
		);
	}

	/**
	 * Creates a response body wrapper.
	 *
	 * @param <V>    the type of the response body to be post-processed
	 * @param format the format of the response body to be post-processed
	 * @param mapper the response body mapper; takes as argument a response and its {@code format} body and must
	 *               return a non-null updated value
	 *
	 * @return a wrapper that post-process response {@code format} bodies using {@code mapper}
	 *
	 * @throws NullPointerException if either {@code format} or {@code mapper} is null
	 */
	public static <V> Wrapper postprocessor(
			final Format<V> format, final BiFunction<? super Response, ? super V, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> handler.handle(request).map(response ->
				response.body(format).fold(error -> { throw error; }, value -> response.body(format,
						requireNonNull(mapper.apply(response, value), "null mapper return value")
				))
		);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Wraps a handler.
	 *
	 * @param handler the handler to be wrapped
	 *
	 * @return the combined handler generated by wrapping this wrapper around {@code handler}
	 */
	public Handler wrap(final Handler handler);


	/**
	 * Chains a wrapper.
	 *
	 * @param wrapper the handler to be chained
	 *
	 * @return the combined wrapper generated by wrapping this wrapper around {@code wrapper}
	 *
	 * @throws NullPointerException if {@code wrapper} is null
	 */
	public default Wrapper with(final Wrapper wrapper) {

		if ( wrapper == null ) {
			throw new NullPointerException("null wrapper");
		}

		return handler -> wrap(wrapper.wrap(handler));
	}

}
