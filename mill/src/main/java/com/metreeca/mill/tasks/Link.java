/*
 * Copyright Â© 2013-2018 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.mill.tasks;

import com.metreeca.mill.Task;
import com.metreeca.mill._Cell;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Resource;
import org.eclipse.rdf4j.model.Statement;

import java.util.ArrayList;
import java.util.Collection;
import java.util.stream.Stream;

import static com.metreeca.mill._Cell.cell;
import static com.metreeca.spec.things.Values.statement;


/**
 * Item expansion task.
 *
 * <p>For each item in the incoming stream, generates a new item with the same focus and a model extended with the
 * models generated by executing a task on a singleton stream containing only the source item.</p>
 *
 * <p>The generated model may optionally {@linkplain #link(IRI) link} the source focus  to generated focuses.</p>
 */
public final class Link implements Task {

	private final Task task;

	private IRI link;


	public Link(final Task task) {

		if ( task == null ) {
			throw new NullPointerException("null task");
		}

		this.task=task;
	}

	public Link link(final IRI link) {

		this.link=link;

		return this;
	}


	@Override public Stream<_Cell> execute(final Stream<_Cell> items) {
		return items.map(item -> {

			final Resource focus=item.focus();
			final Collection<Statement> model=new ArrayList<>(item.model());

			task.execute(Stream.of(item)).forEachOrdered(target -> {

				final Collection<Statement> statements=target.model();

				if ( link != null && !statements.isEmpty() ) {
					model.add(statement(focus, link, target.focus()));
				}

				model.addAll(statements);

			});

			return cell(focus, model);

		});
	}

}
