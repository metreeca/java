/*
 * Copyright © 2013-2023 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.http.rdf;

import org.eclipse.rdf4j.model.IRI;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Stream;

import static com.metreeca.http.rdf.Values.format;

import static java.util.Arrays.stream;
import static java.util.Collections.unmodifiableList;
import static java.util.Collections.unmodifiableSet;
import static java.util.stream.Collectors.*;

/**
 * Focus shift operator.
 *
 * <p>Describes how to navigate from a value to a set of linked values.</p>
 */
public abstract class Shift {

    public abstract <V> V map(final Shift.Probe<V> probe);

    public final <V> V map(final Function<Shift, V> mapper) {

        if ( mapper == null ) {
            throw new NullPointerException("null mapper");
        }

        return mapper.apply(this);
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Shift probe.
     *
     * <p>Generates a result by probing shifts.</p>
     *
     * @param <V> the type of the generated result value
     */
    public abstract static class Probe<V> implements Function<Shift, V> {

        @Override public final V apply(final Shift shift) {
            return shift == null ? null : shift.map(this);
        }


        //// Paths /////////////////////////////////////////////////////////////////////////////////////////////////////

        public V probe(final Step step) { return probe((Shift)step); }

        public V probe(final Seq seq) { return probe((Shift)seq); }

        public V probe(final Alt alt) { return probe((Shift)alt); }


        //// Fallback //////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * Probes a generic shift.
         *
         * @param shift the generic shift to be probed
         *
         * @return the result generated by probing {@code shift}; by default {@code null}
         */
        public V probe(final Shift shift) { return null; }

    }

    /**
     * Alternative path.
     */
    public static final class Alt extends Path {

        public static Path alt(final IRI... paths) {

            if ( paths == null || stream(paths).anyMatch(Objects::isNull) ) {
                throw new NullPointerException("null paths");
            }

            return alt(stream(paths).map(Step::step));
        }

        public static Path alt(final Path... paths) {

            if ( paths == null || stream(paths).anyMatch(Objects::isNull) ) {
                throw new NullPointerException("null paths");
            }

            return alt(stream(paths));
        }

        public static Path alt(final Collection<Path> paths) {

            if ( paths == null || paths.stream().anyMatch(Objects::isNull) ) {
                throw new NullPointerException("null paths");
            }

            return alt(paths.stream());
        }


        private static Path alt(final Stream<Path> paths) {

            final Set<Path> set=paths.collect(toCollection(LinkedHashSet::new));

            return set.size() == 1 ? set.iterator().next() : new Alt(set);
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private final Set<Path> paths;


        private Alt(final Set<Path> paths) {
            this.paths=unmodifiableSet(paths);
        }


        public Set<Path> paths() {
            return paths;
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        @Override public <V> V map(final Probe<V> probe) {
            return probe.probe(this);
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        @Override public boolean equals(final Object object) {
            return this == object || object instanceof Alt
                    && paths.equals(((Alt)object).paths);
        }

        @Override public int hashCode() {
            return paths.hashCode();
        }

        @Override public String toString() {
            return paths.stream().map(Object::toString).collect(joining("|", "(", ")"));
        }

    }

    /**
     * Property path.
     *
     * @see <a href="https://www.w3.org/TR/sparql11-query/#propertypaths">SPARQL 1.1 Query Language - § 9 Property
     * Paths</a>
     */
    public abstract static class Path extends Shift { }

    /**
     * Sequence path.
     */
    public static final class Seq extends Path {

        public static Path seq(final IRI... paths) {

            if ( paths == null || stream(paths).anyMatch(Objects::isNull) ) {
                throw new NullPointerException("null paths");
            }

            return seq(stream(paths).map(Step::step));
        }

        public static Path seq(final Path... paths) {

            if ( paths == null || stream(paths).anyMatch(Objects::isNull) ) {
                throw new NullPointerException("null paths");
            }

            return seq(stream(paths).sequential());
        }

        public static Path seq(final Collection<Path> paths) {

            if ( paths == null || paths.stream().anyMatch(Objects::isNull) ) {
                throw new NullPointerException("null paths");
            }

            return seq(paths.stream().sequential());
        }


        private static Path seq(final Stream<Path> paths) {

            final List<Path> list=paths.collect(toList());

            return list.size() == 1 ? list.get(0) : new Seq(list);
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private final List<Path> paths;


        private Seq(final List<Path> paths) {
            this.paths=unmodifiableList(paths);
        }


        public List<Path> paths() {
            return paths;
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        @Override public <V> V map(final Probe<V> probe) {
            return probe.probe(this);
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        @Override public boolean equals(final Object object) {
            return this == object || object instanceof Seq
                    && paths.equals(((Seq)object).paths);
        }

        @Override public int hashCode() {
            return paths.hashCode();
        }

        @Override public String toString() {
            return paths.stream().map(Object::toString).collect(joining("/", "(", ")"));
        }

    }

    /**
     * Predicate path.
     */
    public static final class Step extends Path {

        public static Path step(final IRI iri) {

            if ( iri == null ) {
                throw new NullPointerException("null iri");
            }

            return new Step(iri);
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        private final IRI iri;


        private Step(final IRI iri) {
            this.iri=iri;
        }


        public IRI iri() {
            return iri;
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        @Override public <V> V map(final Probe<V> probe) {
            return probe.probe(this);
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        @Override public boolean equals(final Object object) {
            return this == object || object instanceof Step
                    && iri.equals(((Step)object).iri);
        }

        @Override public int hashCode() {
            return iri.hashCode();
        }

        @Override public String toString() {
            return format(iri);
        }

    }
}
