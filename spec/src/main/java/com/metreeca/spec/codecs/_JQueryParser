/*
 * Copyright Â© 2013-2017 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Metreeca. If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.spec.codecs;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public final class _JQueryParser {

	public static void main(final String... args) {

		final Map<String, String[]> parameters=new LinkedHashMap<>();

		parameters.put("line[]", new String[] {"http://localhost/product-lines/classic-cars"});
		parameters.put("scale[]", new String[] {"1:10", "1:24"});
		parameters.put("price[>=]", new String[] {"100"});
		parameters.put("price[<=]", new String[] {});


		final Map<String, Object> specs=new LinkedHashMap<>();


		for (final Map.Entry<String, String[]> entry : parameters.entrySet()) {


			final String key=entry.getKey();

			final Matcher matcher=Pattern.compile("([^\\[\\]]+)|\\[([^\\[\\]]*)\\]").matcher(key);

			while ( matcher.find() ) {
				final String group=matcher.group(1);
				System.out.println(group+" / "+matcher.group(2));

				if ( group != null ) {

				}
			}
		}
	}
}
