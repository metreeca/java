/*
 * Copyright Â© 2013-2022 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.http.actions;


import java.io.UncheckedIOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.*;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

import static java.nio.charset.StandardCharsets.UTF_8;
import static java.util.Objects.requireNonNull;


/**
 * Template filling.
 *
 * <p>Maps input values to streams of strings generated from a textual {@linkplain #model(String) model} containing
 * the following variable placeholders and a set of {@linkplain #values(String, Function) expressions}, that is
 * function mapping from input values to sequences of variable substitutions:</p>
 *
 * <ul>
 *
 *     <li>{@code {<name>}} : replaced with one of the values generated by the expression for variable {@code name};</li>
 *
 *     <li>{@code %{<name>}} : replaced with the URLEncoded value of one of the values generated by the
 *     expression for variable {@code name};</li>
 *
 *     <li>{@code \{<name>}} : replaced verbatim with {@code {<name>}}.</li>
 *
 * </ul>
 *
 * @param <V> the type of the input values used to generate strings
 */
public final class Fill<V> implements Function<V, Stream<String>> {

	private static final Pattern PlaceholderPattern=Pattern.compile("(?<modifier>[\\\\%])?\\{(?<name>\\w+)}");


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private String model="";

	private final Map<String, Function<V, Stream<String>>> parameters=new LinkedHashMap<>();


	/**
	 * Configures the model (defaults to the empty string).
	 *
	 * @param model the model to bes used for generating texts from input values
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if {@code model} is null
	 */
	public Fill<V> model(final String model) {

		if ( model == null ) {
			throw new NullPointerException("null model");
		}

		this.model=model;

		return this;
	}


	/**
	 * Configures a variable.
	 *
	 * @param name the variable whose value is the {@linkplain Object#toString() string representation} of the input
	 *             value or the empty string if the input value is null
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if {@code name} is null
	 */
	public Fill<V> value(final String name) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		return values(name, v -> Stream.of(v == null ? "" : v.toString()));
	}

	/**
	 * Configures a variable.
	 *
	 * @param name  the variable whose value is {@code value}
	 * @param value the value for {@code name}
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if either {@code name} or {@code value} is null
	 */
	public Fill<V> value(final String name, final Object value) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		return values(name, v -> Stream.of(value)
				.filter(Objects::nonNull)
				.map(Object::toString)
		);
	}

	/**
	 * Configures a variable.
	 *
	 * @param name       the variable whose value is provided by {@code expression}
	 * @param expression an expression mapping from an input value to a value for {@code name}
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if either {@code name} or {@code expression} is null
	 */
	public Fill<V> value(final String name, final Function<V, String> expression) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		if ( expression == null ) {
			throw new NullPointerException("null expression");
		}

		return values(name, v -> Stream.of(expression.apply(v)));
	}


	/**
	 * Configures a multi-valued variable.
	 *
	 * @param name   the variable whose values are provided by {@code values}
	 * @param values an array containing values for {@code name}; null elements are ignored
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if either {@code name} or {@code values} is null
	 */
	public Fill<V> values(final String name, final Object... values) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		if ( values == null ) {
			throw new NullPointerException("null values");
		}

		return values(name, Stream.of(values));
	}

	/**
	 * Configures a multi-valued variable.
	 *
	 * @param name   the variable whose values are provided by {@code values}
	 * @param values a collection containing values for {@code name}; null elements are ignored
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if either {@code name} or {@code values} is null
	 */
	public Fill<V> values(final String name, final Collection<Object> values) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		if ( values == null ) {
			throw new NullPointerException("null values");
		}

		return values(name, values.stream());
	}

	/**
	 * Configures a multi-valued variable.
	 *
	 * @param name   the variable whose values are provided by {@code values}
	 * @param values a stream returning values for {@code name}; null elements are ignored
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if either {@code name} or {@code values} is null
	 */
	public Fill<V> values(final String name, final Stream<Object> values) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		if ( values == null ) {
			throw new NullPointerException("null values");
		}

		return values(name, v -> values
				.filter(Objects::nonNull)
				.map(Object::toString)
		);
	}

	/**
	 * Configures a multi-valued variable.
	 *
	 * @param name       the variable whose values are provided by {@code expression}
	 * @param expression an expression mapping from an input value to a stream of values for {@code name}
	 *
	 * @return this action
	 *
	 * @throws NullPointerException if either {@code name} or {@code expression} is null
	 */
	public Fill<V> values(final String name, final Function<V, Stream<String>> expression) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		if ( expression == null ) {
			throw new NullPointerException("null expression");
		}

		parameters.put(name, expression);

		return this;
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Generates text values.
	 *
	 * @param value the input value for expressions providing variable values
	 *
	 * @return a stream of strings from the configured {@linkplain #model(String) model} and
	 * {@linkplain #values(String, Function) expressions}
	 */
	@Override public Stream<String> apply(final V value) {

		return stream(value).map(this::fill);

	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	 * Produces the cartesian product of parameter values computed on an item.
	 */
	private Stream<Function<String, String>> stream(final V item) {

		Stream<Function<String, String>> resolvers=Stream.of(key -> null);

		for (final Map.Entry<String, Function<V, Stream<String>>> entry : parameters.entrySet()) {

			final String name=entry.getKey();
			final Function<V, Stream<String>> expression=entry.getValue();

			resolvers=resolvers.flatMap(resolver -> requireNonNull(expression.apply(item))
					.filter(Objects::nonNull)
					.map(value -> key -> key.equals(name) ? value : resolver.apply(key))
			);

		}

		return resolvers;
	}

	/*
	 * Fills out the template.
	 */
	private String fill(final Function<String, String> resolver) {

		final StringBuilder builder=new StringBuilder(model.length());
		final Matcher matcher=PlaceholderPattern.matcher(model);

		int index=0;

		while ( matcher.find() ) {

			final String modifier=matcher.group("modifier");
			final String name=matcher.group("name");

			final String value=resolver.apply(name);

			try {

				builder.append(model, index, matcher.start()).append(
						"\\".equals(modifier) ? matcher.group().substring(1)
								: "%".equals(modifier) ? URLEncoder.encode(value, UTF_8.name())
								: value != null ? value
								: ""
				);

			} catch ( final UnsupportedEncodingException unexpected ) {
				throw new UncheckedIOException(unexpected);
			}

			index=matcher.end();
		}

		builder.append(model.substring(index));

		return builder.toString();
	}

}
