/*
 * Copyright Â© 2013-2018 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.form;

import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;

import static java.util.Objects.requireNonNull;


/**
 * Operation result.
 *
 * <p>Describes the result of an operation that could either return a value or report an error.</p>
 *
 * @param <V> the type of the value returned by the operation
 * @param <E> the type of the error reported by the operation
 */
public abstract class Result<V, E> {

	/**
	 * Creates a value operation result.
	 *
	 * @param value the value returned by the operation
	 * @param <V>   the type of the value returned by the operation
	 * @param <E>   the type of the error reported by the operation
	 *
	 * @return a result providing access to the value returned by the operation
	 */
	public static <V, E> Result<V, E> value(final V value) {

		if ( value == null ) {
			throw new NullPointerException("null value");
		}

		return new Value<>(value);
	}

	/**
	 * Creates an error operation result.
	 *
	 * @param error the error reported by the operation
	 * @param <V>   the type of the value returned by the operation
	 * @param <E>   the type of the error reported by the operation
	 *
	 * @return a result providing access to the error reported by the operation
	 */

	public static <V, E> Result<V, E> error(final E error) {

		if ( error == null ) {
			throw new NullPointerException("null error");
		}

		return new Error<>(error);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private Result() {} // ADT


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Maps operation results.
	 *
	 * @param value a function mapping from the returned value to the final operation outcome
	 * @param error a function mapping from the reported error to the final operation outcome
	 * @param <R>   the type of the final operation outcome
	 *
	 * @return the final operation outcome, as generated by either {@code value} or {@code error} according to the
	 * result state
	 *
	 * @throws NullPointerException if either {@code value} or {@code error} is null or returns a null value
	 */
	public abstract <R> R map(final Function<V, R> value, final Function<E, R> error);

	/**
	 * Handles operations results.
	 *
	 * @param value a consumer accepting the operation returned value
	 * @param error a consumer accepting the operation reported error
	 *
	 * @return this result
	 *
	 * @throws NullPointerException if either {@code value} or {@code error} is null
	 */
	public Result<V, E> handle(final Consumer<V> value, final Consumer<E> error) {

		if ( value == null ) {
			throw new NullPointerException("null value consumer");
		}

		if ( error == null ) {
			throw new NullPointerException("null error consumer");
		}

		return map(
				v -> {
					value.accept(v);
					return this;
				},
				e -> {
					error.accept(e);
					return this;
				}
		);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Maps the operation returned value.
	 *
	 * @param mapper the value mapping function
	 * @param <R>    the type of the mapped returned value
	 *
	 * @return the result generated by applying {@code mapper} to the returned value of this result, if one was present;
	 * a result providing access to the reported error of this result, otherwise
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public <R> Result<R, E> value(final Function<V, Result<R, E>> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return map(v -> requireNonNull(mapper.apply(v), "null mapper return value"), Result::error);
	}

	/**
	 * Maps the operation reported error.
	 *
	 * @param mapper the error mapping function
	 * @param <R>    the type of the mapped reported error
	 *
	 * @return the result generated by applying {@code mapper} to the reported error of this result, if one was present;
	 * a result providing access to the returned value of this result, otherwise
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public <R> Result<V, R> error(final Function<E, Result<V, R>> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return map(Result::value, e -> requireNonNull(mapper.apply(e), "null mapper return value"));
	}


	/**
	 * Retrieves the operation returned value.
	 *
	 * @return an optional operation returned value, if one is present; an empty optional, otherwise
	 */
	public Optional<V> value() {
		return map(Optional::of, e -> Optional.empty());
	}

	/**
	 * Retrieves the operation reported error.
	 *
	 * @return an optional operation reported error, if one is present; an empty optional, otherwise
	 */
	public Optional<E> error() {
		return map(v -> Optional.empty(), Optional::of);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private static final class Value<V, E> extends Result<V, E> {

		private final V value;

		private Value(final V value) { this.value=value; }


		@Override public <R> R map(final Function<V, R> value, final Function<E, R> error) {

			if ( value == null ) {
				throw new NullPointerException("null value");
			}

			if ( error == null ) {
				throw new NullPointerException("null error");
			}

			return requireNonNull(value.apply(this.value), "null mapper return value");
		}
	}

	private static final class Error<V, E> extends Result<V, E> {

		private final E error;

		private Error(final E error) { this.error=error; }

		@Override public <R> R map(final Function<V, R> value, final Function<E, R> error) {

			if ( value == null ) {
				throw new NullPointerException("null value");
			}

			if ( error == null ) {
				throw new NullPointerException("null error");
			}

			return requireNonNull(error.apply(this.error), "null mapper return value");
		}
	}

}
