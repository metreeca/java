/*
 * Copyright Â© 2013-2019 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.form.shapes;


import com.metreeca.form.Shape;

import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;


/**
 * Memoizing shape.
 *
 * <p>Memoizes the results of {@linkplain #memoizable(Function) memoizable} shape mappers.</p>
 */
@SuppressWarnings("unchecked") public final class Memo implements Shape {

	/**
	 * Creates a memoizing shape.
	 *
	 * @param shape the shape whose mapping results are to be memoized
	 *
	 * @return a new shape memoizing results generated by applying {@linkplain #memoizable(Function) memoizable} mappers
	 * to {@code shape}
	 *
	 * @throws NullPointerException if {@code shape} is null
	 */
	public static Shape memo(final Shape shape) { return new Memo(shape); }


	/**
	 * Creates a memoizable shape mapper.
	 *
	 * @param <V>    the return value type for {@code mapper}
	 * @param mapper the shape mapper whose results are to be memoized
	 *
	 * @return a shape mapper supporting memoization of results computed by {@code mapper}
	 *
	 * @throws NullPointerException if {@code mapper} is null
	 */
	public static <V> Function<Shape, V> memoizable(final Function<Shape, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return new Memoizable<>(mapper);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private final Shape shape;

	private final ConcurrentHashMap<Function<Shape, ?>, Object> memos=new ConcurrentHashMap<>();


	private Memo(final Shape shape) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		this.shape=shape;
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override public <V> V map(final Probe<V> probe) {
		return shape.map(probe);
	}

	@Override public <V> V map(final Function<Shape, V> mapper) {
		return mapper instanceof Memoizable ? (V)memos.computeIfAbsent(mapper, shape::map) : shape.map(mapper);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override public boolean equals(final Object object) {
		return this == object || object instanceof Memo && shape.equals(((Memo)object).shape);
	}

	@Override public int hashCode() {
		return shape.hashCode();
	}

	@Override public String toString() {
		return "memo("+shape+")";
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private static final class Memoizable<V> implements Function<Shape, V> {

		private final Function<Shape, V> mapper;


		private Memoizable(final Function<Shape, V> mapper) { this.mapper=mapper; }


		@Override public V apply(final Shape shape) {
			return shape.map(mapper);
		}

	}

}
