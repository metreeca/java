/*
 * Copyright Â© 2013-2021 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.json;

import com.metreeca.json.shifts.*;

import org.eclipse.rdf4j.model.Statement;
import org.eclipse.rdf4j.model.Value;

import java.util.Collection;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Stream;

/**
 * Focus shift operator.
 *
 * <p>Describes how to transform a set of focus values into a derived set.</p>
 */
public abstract class Shift {

	/**
	 * Applies this shift operator to a set of focus values.
	 *
	 * @param values     the focus values
	 * @param statements the model statements to be used as context for the shift operation
	 *
	 * @return a stream of values derived by applying this shift operator to the set of focus {@code values} in the
	 * context of the model {@code statements}
	 *
	 * @throws NullPointerException if either {@code values} or {@code statements} is null or contains null elements
	 */
	public Stream<Value> apply(final Collection<Value> values, final Collection<Statement> statements) {

		if ( values == null || values.stream().anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null values");
		}

		if ( statements == null || statements.stream().anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null statements");
		}

		return map(new ShiftEvaluator(values, statements));
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public abstract <V> V map(final Shift.Probe<V> probe);

	public final <V> V map(final Function<Shift, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return mapper.apply(this);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Shift probe.
	 *
	 * <p>Generates a result by probing shifts.</p>
	 *
	 * @param <V> the type of the generated result value
	 */
	public abstract static class Probe<V> implements Function<Shift, V> {

		@Override public final V apply(final Shift shift) {
			return shift == null ? null : shift.map(this);
		}


		//// Paths /////////////////////////////////////////////////////////////////////////////////////////////////////

		public V probe(final Step step) { return probe((Shift)step); }

		public V probe(final Seq seq) { return probe((Shift)seq); }

		public V probe(final Alt alt) { return probe((Shift)alt); }


		//// Fallback //////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * Probes a generic shift.
		 *
		 * @param shift the generic shift to be probed
		 *
		 * @return the result generated by probing {@code shift}; by default {@code null}
		 */
		public V probe(final Shift shift) { return null; }

	}

}
