/*
 * Copyright Â© 2013-2021 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.json.shapes;

import com.metreeca.json.Shape;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Value;
import org.eclipse.rdf4j.model.vocabulary.RDF;

import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

import static com.metreeca.json.Values.format;
import static com.metreeca.json.Values.internal;
import static com.metreeca.json.shapes.All.all;
import static com.metreeca.json.shapes.And.and;
import static com.metreeca.json.shapes.Or.or;

import static java.lang.String.format;
import static java.util.Collections.emptyMap;
import static java.util.function.Function.identity;
import static java.util.stream.Collectors.toMap;


/**
 * Field structural constraint.
 *
 * <p>States that the derived focus set generated by following a single step path is consistent with a given {@link
 * Shape shape}.</p>
 */
public final class Field extends Shape {

	private static final java.util.regex.Pattern AliasPattern=Pattern.compile(
			"\\w+"
	);

	private static final Pattern NamedIRIPattern=Pattern.compile(
			"([/#:])(?<name>"+AliasPattern+"[^/#:]+)(/|#|#_|#id|#this)?$"
	);


	public static Field field(final String name) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		return field(internal(name));
	}

	public static Field field(final IRI name) {

		if ( name == null ) {
			throw new NullPointerException("null name");
		}

		return new Field(name, true, "", and());
	}


	public static Optional<Field> field(final Shape shape, final Field step) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		if ( step == null ) {
			throw new NullPointerException("null step");
		}

		return fields(shape)

				.filter(field -> // consider only predicate info
						field.direct() == step.direct() && field.name().equals(step.name())
				)

				.findFirst();
	}

	public static Stream<Field> fields(final Shape shape) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		return shape.map(new FieldsProbe());
	}


	public static Map<String, Field> aliases(final Shape shape) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		return aliases(shape, emptyMap());
	}

	public static Map<String, Field> aliases(final Shape shape, final Map<String, String> keywords) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		if ( keywords == null ) {
			throw new NullPointerException("null keywords");
		}


		return fields(shape).collect(toMap(

				field -> {

					final IRI name=field.name();
					final boolean direct=field.direct();

					if ( direct && name.equals(RDF.TYPE) ) {

						return keywords.getOrDefault("@type", "@type");

					} else {

						final String alias=Optional.of(field.alias()).filter(s -> !s.isEmpty()).orElseGet(() -> Optional

								.of(NamedIRIPattern.matcher(name.stringValue()))
								.filter(Matcher::find)
								.map(matcher -> matcher.group("name"))
								.map(label -> direct ? label : label+"Of")

								.orElseThrow(() -> new IllegalArgumentException(format(
										"undefined alias for %s", field.shape(and())
								)))

						);

						if ( keywords.containsValue(alias) ) {
							throw new IllegalArgumentException(format(
									"reserved alias <%s> for %s", alias, field.shape(and())
							));
						}

						return alias;

					}

				},

				identity(),

				(x, y) -> {

					throw new IllegalArgumentException(format(
							"clashing aliases for fields %s / %s", x.shape(and()), y.shape(and())
					));

				},

				LinkedHashMap::new
		));
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private final IRI name;

	private final boolean direct;
	private final String alias;

	private final Shape shape;


	private Field(final IRI name, final boolean direct, final String alias, final Shape shape) {
		this.name=name;
		this.direct=direct;
		this.alias=alias;
		this.shape=shape;
	}


	Field merge(final Field field) {
		if ( field.alias.isEmpty() || field.alias.equals(alias) ) {

			return this;

		} else if ( alias.isEmpty() ) {

			return alias(field.alias);

		} else {

			throw new IllegalArgumentException(format(
					"clashing aliases <%s> / <%s> for field %s", alias, field.alias, field.shape(and())
			));

		}
	}


	public IRI name() {
		return name;
	}


	public boolean direct() {
		return direct;
	}

	public Field direct(final boolean direct) {
		return new Field(name, direct, alias, shape);
	}


	public String alias() {
		return alias;
	}

	public Field alias(final String alias) {

		if ( alias == null ) {
			throw new NullPointerException("null alias");
		}

		if ( !(alias.isEmpty() || AliasPattern.matcher(alias).matches()) ) {
			throw new IllegalArgumentException(format("malformed alias <%s>", alias));
		}

		return new Field(name, direct, alias, shape);
	}


	public Shape shape() {
		return shape;
	}

	public Field shape(final Shape shape) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		return new Field(name, direct, alias, shape);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	public Field inverse() {
		return new Field(name, false, alias, shape);
	}


	public Shape as(final Shape shape) {

		if ( shape == null ) {
			throw new NullPointerException("null shape");
		}

		return shape.equals(or()) ? and() : new Field(name, direct, alias, shape);
	}

	public Shape as(final Shape... shapes) {

		if ( shapes == null || Arrays.stream(shapes).anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null shapes");
		}

		final Shape and=and(shapes);

		return and.equals(or()) ? and() : new Field(name, direct, alias, and);
	}

	public Shape as(final Object... values) {

		if ( values == null || Arrays.stream(values).anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null values");
		}

		return new Field(name, direct, alias, all(values));
	}

	public Shape as(final Value... values) {

		if ( values == null || Arrays.stream(values).anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null values");
		}

		return new Field(name, direct, alias, all(values));
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override public <V> V map(final Probe<V> probe) {

		if ( probe == null ) {
			throw new NullPointerException("null probe");
		}

		return probe.probe(this);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override public boolean equals(final Object object) {
		return this == object || object instanceof Field
				&& name.equals(((Field)object).name)
				&& direct == ((Field)object).direct
				&& alias.equals(((Field)object).alias)
				&& shape.equals(((Field)object).shape);
	}

	@Override public int hashCode() {
		return name.hashCode()
				^Boolean.hashCode(direct)
				^alias.hashCode()
				^shape.hashCode();
	}

	@Override public String toString() {

		final StringBuilder builder=new StringBuilder(25);

		builder.append("field(");

		if ( !alias.isEmpty() ) { builder.append(alias).append('='); }
		if ( !direct ) { builder.append('^'); }

		builder.append(format(name));

		if ( !shape.equals(and()) ) { builder.append(").as(").append(shape); }

		builder.append(")");


		return builder.toString();
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private static final class FieldsProbe extends Probe<Stream<Field>> {

		@Override public Stream<Field> probe(final Field field) {
			return Stream.of(field);
		}

		@Override public Stream<Field> probe(final And and) {
			return and.shapes().stream().flatMap(shape -> shape.map(this));
		}

		@Override public Stream<Field> probe(final Or or) {
			return or.shapes().stream().flatMap(shape -> shape.map(this));
		}

		@Override public Stream<Field> probe(final When when) {
			return Stream.of(when.pass(), when.fail()).flatMap(this);
		}

		@Override public Stream<Field> probe(final Shape shape) {
			return Stream.empty();
		}

	}

}
