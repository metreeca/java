/*
 * Copyright Â© 2013-2020 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca/Link.
 *
 * Metreeca/Link is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca/Link is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca/Link.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.json.shapes;

import com.metreeca.json.Shape;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Value;

import static com.metreeca.json.shapes.All.all;
import static com.metreeca.json.shapes.And.and;
import static com.metreeca.json.shapes.Or.or;


/**
 * Field structural constraint.
 *
 * <p>States that the derived focus set generated by following a single step path is consistent with a given {@link
 * Shape shape}.</p>
 */
public final class Field extends Shape {

	public static Shape field(final IRI name) {
		return field(name, all());
	}

	public static Shape field(final IRI name, final Value... values) {
		return field(name, all(values));
	}

	public static Shape field(final IRI name, final Shape... shapes) {return field(name, and(shapes));}

	public static Shape field(final IRI name, final Shape shape) {
		return shape.equals(or()) ? and() : new Field(name, shape);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	private final IRI label;
	private final Shape value;


	private Field(final IRI label, final Shape value) {

		if ( label == null ) {
			throw new NullPointerException("null label");
		}

		if ( value == null ) {
			throw new NullPointerException("null value");
		}

		this.label=label;
		this.value=value;
	}


	public IRI label() {
		return label;
	}

	public Shape value() {
		return value;
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override public <V> V map(final Probe<V> probe) {

		if ( probe == null ) {
			throw new NullPointerException("null probe");
		}

		return probe.probe(this);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Override public boolean equals(final Object object) {
		return this == object || object instanceof Field
				&& label.equals(((Field)object).label)
				&& value.equals(((Field)object).value);
	}

	@Override public int hashCode() {
		return label.hashCode()^value.hashCode();
	}

	@Override public String toString() {
		return "field("+label+(value.equals(and()) ? "" : ", "+value)+")";
	}

}
