/*
 * Copyright Â© 2013-2020 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.json;

import com.metreeca.json.queries.*;

import java.util.function.Function;


/**
 * Shape-driven linked data query.
 */
public abstract class Query {

	public abstract <V> V map(final Probe<V> probe);

	public final <V> V map(final Function<Query, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return mapper.apply(this);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Query probe.
	 *
	 * <p>Generates a result by probing queries.</p>
	 *
	 * @param <V> the type of the generated result value
	 */
	public abstract static class Probe<V> implements Function<Query, V> {

		@Override public V apply(final Query query) {
			return query == null ? null : query.map(this);
		}


		//// Queries ///////////////////////////////////////////////////////////////////////////////////////////////////

		public abstract V probe(final Items items);

		public abstract V probe(final Terms terms);

		public abstract V probe(final Stats stats);


		//// Fallback //////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * Probes a generic query.
		 *
		 * @param query the generic query to be probed
		 *
		 * @return the result generated by probing {@code query}; by default {@code null}
		 */
		public V probe(final Query query) { return null; }

	}

}
