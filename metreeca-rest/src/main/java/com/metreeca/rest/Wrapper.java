/*
 * Copyright Â© 2013-2021 Metreeca srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.metreeca.rest;


import java.util.*;
import java.util.function.*;

import static com.metreeca.rest.Handler.handler;
import static com.metreeca.rest.MessageException.status;
import static com.metreeca.rest.Response.MethodNotAllowed;
import static com.metreeca.rest.Response.Unauthorized;

import static java.util.Arrays.asList;
import static java.util.Objects.requireNonNull;


/**
 * Handler wrapper {thread-safe}.
 *
 * <p>Inspects and possibly alters {@linkplain Request requests} and {@linkplain Response responses} processed and
 * generated by resource {@linkplain Handler handlers}.</p>
 *
 * <p><strong>Warning</strong> / Implementations must be thread-safe.</p>
 */
@FunctionalInterface public interface Wrapper {

	/**
	 * Creates a conditional wrapper.
	 *
	 * @param test the request predicate used to decide if requests and responses are to be routed through the wrapper
	 * @param pass the wrapper requests and responses are to be routed through when {@code test} evaluates to {@code
	 *             true} on the request
	 *
	 * @return a conditional wrapper that routes requests and responses through the {@code pass} handler if the {@code
	 * test} predicate evaluates to {@code true} on the request or to a dummy wrapper
	 * otherwise
	 *
	 * @throws NullPointerException if either {@code test} or {@code pass} is null
	 */
	public static Wrapper wrapper(final Predicate<Request> test, final Wrapper pass) {

		if ( test == null ) {
			throw new NullPointerException("null test predicate");
		}

		if ( pass == null ) {
			throw new NullPointerException("null pass wrapper");
		}

		return wrapper(test, pass, handler -> handler);
	}

	/**
	 * Creates a conditional wrapper.
	 *
	 * @param test the request predicate used to select the wrapper requests and responses are to be routed through
	 * @param pass the wrapper requests and responses are to be routed through when {@code test} evaluates to {@code
	 *             true} on the request
	 * @param fail the wrapper requests and responses are to be routed through when {@code test} evaluates to {@code
	 *             false} on the request
	 *
	 * @return a conditional wrapper that routes requests and responses either through the {@code pass} or the {@code
	 * fail} wrapper according to the results of the {@code test} predicate
	 *
	 * @throws NullPointerException if any of the arguments is null
	 */
	public static Wrapper wrapper(final Predicate<Request> test, final Wrapper pass, final Wrapper fail) {

		if ( test == null ) {
			throw new NullPointerException("null test predicate");
		}

		if ( pass == null ) {
			throw new NullPointerException("null pass wrapper");
		}

		if ( fail == null ) {
			throw new NullPointerException("null fail wrapper");
		}

		return handler -> handler(test, pass.wrap(handler), fail.wrap(handler));
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Creates a pre-processing wrapper.
	 *
	 * @param mapper a request mapping function; must return a non-null value
	 *
	 * @return a wrapper that pre-process requests using {@code mapper}
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public static Wrapper preprocessor(final Function<Request, Request> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> handler.handle(
				requireNonNull(mapper.apply(request), "null mapper return value")
		);
	}

	/**
	 * Creates a pre-processing body wrapper.
	 *
	 * @param <V>    the type of the request body to be pre-processed
	 * @param format the format of the request body to be pre-processed
	 * @param mapper the request body mapper; takes as argument a request and its {@code format} body and must return a
	 *               non-null updated value
	 *
	 * @return a wrapper that pre-process request {@code format} bodies using {@code mapper}
	 *
	 * @throws NullPointerException if either {@code format} or {@code mapper} is null
	 */
	public static <V> Wrapper preprocessor(
			final Format<V> format, final BiFunction<? super Request, ? super V, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request ->
				request.body(format).fold(request::reply, value -> handler.handle(
						request.body(format, requireNonNull(mapper.apply(request, value), "null mapper return value"))
						)
				);
	}


	/**
	 * Creates a  {@linkplain Response#success() successful} post-processing wrapper.
	 *
	 * @param mapper a response mapping function; must return a non-null value
	 *
	 * @return a wrapper that post-process successful responses using {@code mapper}
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public static Wrapper postprocessor(final Function<Response, Response> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> handler.handle(request).map(response -> response.success()
				? requireNonNull(mapper.apply(response), "null mapper return value")
				: response
		);
	}

	/**
	 * Creates a {@linkplain Response#success() successful} post-processing body wrapper.
	 *
	 * @param <V>    the type of the response body to be post-processed
	 * @param format the format of the response body to be post-processed
	 * @param mapper the response body mapper; takes as argument a response and its {@code format} body and must
	 *                  return a
	 *               non-null updated value
	 *
	 * @return a wrapper that post-process successful response {@code format} bodies using {@code mapper}
	 *
	 * @throws NullPointerException if either {@code format} or {@code mapper} is null
	 */
	public static <V> Wrapper postprocessor(
			final Format<V> format, final BiFunction<? super Response, ? super V, V> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return handler -> request -> handler.handle(request).map(response ->
				response.success() ? response.body(format).fold(error -> { throw error; },
						value -> response.body(format,
								requireNonNull(mapper.apply(response, value), "null mapper return value")
						)) : response
		);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Creates a method-based access controller.
	 *
	 * @return a new method-based access rejecting all {@linkplain Request#safe() unsafe} requests with a
	 * {@link Response#MethodNotAllowed} status code
	 */
	public static Wrapper readonly() {
		return readonly(request -> true);
	}

	/**
	 * Creates a method-based access controller.
	 *
	 * @param safe an acceptability test for unsafe requests
	 *
	 * @return a new method-based access rejecting all {@linkplain Request#safe() unsafe} requests failing the
	 * {@code safe } test  with a {@link Response#MethodNotAllowed} status code
	 *
	 * @throws NullPointerException if {@code safe} is null
	 */
	public static Wrapper readonly(final Predicate<Request> safe) {

		if ( safe == null ) {
			throw new NullPointerException("null safe predicate");
		}

		return handler -> request -> safe.or(Request::safe).test(request)
				? handler.handle(request)
				: request.reply(status(MethodNotAllowed));
	}


	/**
	 * Creates a role-based access controller.
	 *
	 * @param roles the user {@linkplain Request#roles(Object...) roles} enabled to perform the action managed by the
	 *              wrapped handler; empty for public access
	 *
	 * @return a new role-based access controller rejecting all requests with no enabled user {@code roles} with
	 * a {@link Response#Unauthorized} status code
	 *
	 * @throws NullPointerException if {@code roles} is null or contains null values
	 */
	public static Wrapper restricted(final Object... roles) {

		if ( roles == null || Arrays.stream(roles).anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null roles");
		}

		return restricted(asList(roles));
	}

	/**
	 * Creates a role-based access controller.
	 *
	 * @param roles the user {@linkplain Request#roles(Object...) roles} enabled to perform the action managed by the
	 *              wrapped handler; empty for public access
	 *
	 * @return a new role-based access controller rejecting all requests with no enabled user {@code roles} with
	 * a {@link Response#Unauthorized} status code
	 *
	 * @throws NullPointerException if {@code roles} is null or contains null values
	 */
	public static Wrapper restricted(final Collection<Object> roles) {

		if ( roles == null || roles.stream().anyMatch(Objects::isNull) ) {
			throw new NullPointerException("null roles");
		}

		return handler -> request -> roles.isEmpty() || request.roles().stream().anyMatch(roles::contains)
				? handler.handle(request.roles(roles))
				: request.reply(status(Unauthorized)); // !!! 404 under strict security
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Wraps a handler.
	 *
	 * @param handler the handler to be wrapped
	 *
	 * @return the combined handler generated by wrapping this wrapper around {@code handler}
	 */
	public Handler wrap(final Handler handler);


	/**
	 * Chains a wrapper.
	 *
	 * @param wrapper the handler to be chained
	 *
	 * @return the combined wrapper generated by wrapping this wrapper around {@code wrapper}
	 *
	 * @throws NullPointerException if {@code wrapper} is null
	 */
	public default Wrapper with(final Wrapper wrapper) {

		if ( wrapper == null ) {
			throw new NullPointerException("null wrapper");
		}

		return handler -> wrap(wrapper.wrap(handler));
	}

}
