/*
 * Copyright Â© 2013-2018 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest;


import com.metreeca.tray.rdf.Graph;

import static com.metreeca.tray.Tray.tool;


/**
 * Handler wrapper {thread-safe}.
 *
 * <p>Inspects and possibly alters {@linkplain Request requests} and {@linkplain Response responses} processed and
 * generated by resource {@linkplain Handler handlers}.</p>
 *
 * <p>Implementations must be thread-safe.</p>
 */
@FunctionalInterface public interface Wrapper {

	/**
	 * Creates a graph reading context.
	 *
	 * @return a wrapper that executes nested handlers using a single connection to the the system {@linkplain
	 * Graph#Factory graph database}
	 */
	public static Wrapper reader() {
		return new Wrapper() {

			private final Graph graph=tool(Graph.Factory);

			@Override public Handler wrap(final Handler handler) {

				if ( handler == null ) {
					throw new NullPointerException("null handler");
				}

				return request -> consumer -> graph.read(connection -> {
					handler.handle(request).accept(consumer);
				});
			}

		};
	}

	/**
	 * Creates a graph writing context.
	 *
	 * @return a wrapper that executes nested handlers inside a single transaction on the the system {@linkplain
	 * Graph#Factory graph database}
	 */
	public static Wrapper writer() {
		return new Wrapper() {

			private final Graph graph=tool(Graph.Factory);

			@Override public Handler wrap(final Handler handler) {

				if ( handler == null ) {
					throw new NullPointerException("null handler");
				}

				return request -> consumer -> graph.edit(connection -> {
					handler.handle(request).accept(consumer);
				});
			}

		};
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Wraps a handler.
	 *
	 * @param handler the handler to be wrapped
	 *
	 * @return the combined handler obtained by wrapping this wrapper around {@code handler}
	 */
	public Handler wrap(final Handler handler);

	/**
	 * Wraps a wrapper.
	 *
	 * @param wrapper the handler to be wrapped
	 *
	 * @return the combined wrapper obtained by wrapping this wrapper around {@code wrapper}
	 *
	 * @throws NullPointerException if {@code wrapper} is null
	 */
	public default Wrapper wrap(final Wrapper wrapper) {

		if ( wrapper == null ) {
			throw new NullPointerException("null wrapper");
		}

		return handler -> wrap(wrapper.wrap(handler));
	}

}
