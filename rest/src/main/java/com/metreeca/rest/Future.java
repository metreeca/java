/*
 * Copyright Â© 2013-2019 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca/Link.
 *
 * Metreeca/Link is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca/Link is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca/Link.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest;

import java.util.function.Consumer;
import java.util.function.Function;

import static java.util.Objects.requireNonNull;


/**
 * Lazy value generator.
 *
 * @param <T> the type of the lazily generated value
  */
@FunctionalInterface public interface Future<T> {

	/**
	 * Connects a consumer to this future value.
	 *
	 * @param consumer the consumer for the lazily generated value
	 *
	 * @throws NullPointerException if {@code value} is null
	 *
	 */
	public void accept(final Consumer<T> consumer);


	/**
	 * Maps this future value.
	 *
	 * @param mapper a value mapping function; must return a non-null value
	 *
	 * @return a new future value generating a value obtained by applying {@code mapper} to the value generated by this
	 * future value
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public default Future<T> map(final Function<T, T> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return consumer -> accept(response -> consumer.accept(
				requireNonNull(mapper.apply(response), "null mapper return value"))
		);
	}

}
