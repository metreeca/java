/*
 * Copyright Â© 2013-2019 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest.handlers.actors.work;


import com.metreeca.form.Form;
import com.metreeca.rest.*;
import com.metreeca.rest.formats.RDFFormat;
import com.metreeca.tray.rdf.Graph;

import org.eclipse.rdf4j.model.Statement;
import org.eclipse.rdf4j.query.GraphQuery;
import org.eclipse.rdf4j.query.QueryLanguage;
import org.eclipse.rdf4j.rio.helpers.AbstractRDFHandler;

import java.util.ArrayList;
import java.util.Collection;
import java.util.function.Function;

import static com.metreeca.form.things.Values.time;
import static com.metreeca.tray.Tray.tool;

import static java.util.Collections.emptySet;


/**
 * Virtual resource browser.
 *
 * <p>Handles retrieval requests on the virtual linked data resource identified by the request {@linkplain
 * Request#item() focus item}.</p>
 *
 * <p>If the request includes an expected {@linkplain Message#shape() resource shape}:</p>
 *
 * <ul>
 *
 * <li>the response includes the derived shape actually used in the retrieval process, redacted according to request
 * user {@linkplain Request#roles() roles}, {@link Form#relate} task, {@link Form#verify} mode and {@link Form#detail}
 * view.</li>
 *
 * <li>the response {@link RDFFormat RDF body} contains the subset of RDF description of the request focus generated by
 * the {@linkplain #model(Function) virtual model generator} matched by the redacted shape.</li>
 *
 * </ul>
 *
 * <p>Otherwise:</p>
 *
 * <ul>
 *
 * <li>the response {@link RDFFormat RDF body} contains the RDF description of the request focus generated by the
 * {@linkplain #model(Function) virtual model generator}.</li>
 *
 * </ul>
 *
 * <p>Empty generated models are reported with a {@link Response#NotFound} status code.</p>
 */
public final class Browser implements Handler {

	private Function<Request, Collection<Statement>> model=request -> emptySet();

	private final Graph graph=tool(Graph.Factory);


	//public Browser() {
	//	delegate(query(false)
	//			// !!! .wrap(modulator().task(Form.relate).view(Form.detail))
	//			.wrap(processor())
	//			.wrap((Request request) -> {
	//
	//				final Collection<Statement> model=this.model.apply(request);
	//
	//				return request.reply(response -> model.isEmpty()
	//
	//						? response.status(Response.NotFound)
	//
	//						: response.status(Response.OK)
	//
	//						.map(r -> pass(request.shape()) ? r : r.shape(request.shape()))
	//
	//						.body(rdf(), model)
	//				);
	//			})
	//	);
	//}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Configures the SPARQL virtual model generator.
	 *
	 * <p>The model for the virtual resource is generated by a SPARQL graph query executed on the shared {@linkplain
	 * Graph#Factory graph} tool, with the following pre-defined bindings:</p>
	 *
	 * <table summary="pre-defined bindings">
	 *
	 * <thead>
	 *
	 * <tr>
	 * <th>variable</th>
	 * <th>value</th>
	 * </tr>
	 *
	 * </thead>
	 *
	 * <tbody>
	 *
	 * <tr>
	 * <td>this</td>
	 * <td>the value of the request {@linkplain Request#item() focus item}</td>
	 * </tr>
	 *
	 * <tr>
	 * <td>user</td>
	 * <td>the IRI identifying the {@linkplain Request#user() user} submitting the request</td>
	 * </tr>
	 *
	 * <tr>
	 * <td>time</td>
	 * <td>an {@code xsd:dateTime} literal representing the current system time with millisecond precision</td>
	 * </tr>
	 *
	 * </tbody>
	 *
	 * </table>
	 *
	 * @param graph the SPARQL graph query to be used as virtual model generator for this relator; empty queries are
	 *              ignored
	 *
	 * @return this relator
	 *
	 * @throws NullPointerException if {@code graph} is null
	 */
	public Browser model(final String graph) {

		if ( graph == null ) {
			throw new NullPointerException("null graph query");
		}

		return model(request -> graph.isEmpty() ? emptySet() : this.graph.query(connection -> {

			final GraphQuery query=connection.prepareGraphQuery(QueryLanguage.SPARQL, graph, request.base());

			query.setBinding("this", request.item());
			query.setBinding("user", request.user());
			query.setBinding("time", time(true));

			final Collection<Statement> model=new ArrayList<>();

			query.evaluate(new AbstractRDFHandler() {
				@Override public void handleStatement(final Statement statement) { model.add(statement); }
			});

			return model;

		}));
	}

	/**
	 * Configures the virtual model generator.
	 *
	 * @param model a function mapping from a request to a possibly empty RDF model; must return a non null value
	 *
	 * @return this relator
	 *
	 * @throws NullPointerException if {@code model} is null
	 */
	public Browser model(final Function<Request, Collection<Statement>> model) {

		if ( model == null ) {
			throw new NullPointerException("null model");
		}

		this.model=model;

		return this;
	}

	@Override public Responder handle(final Request request) {
		throw new UnsupportedOperationException("to be implemented"); // !!! tbi
	}

}
