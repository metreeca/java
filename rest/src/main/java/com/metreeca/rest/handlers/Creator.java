/*
 * Copyright Â© 2013-2019 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca/Link.
 *
 * Metreeca/Link is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca/Link is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca/Link.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest.handlers;


import com.metreeca.rest.*;
import com.metreeca.rest.services.Logger;
import com.metreeca.rest.services._Engine;
import com.metreeca.tree.Shape;

import java.util.function.Function;

import javax.json.JsonValue;

import static com.metreeca.rest.Context.service;
import static com.metreeca.rest.services.Logger.logger;
import static com.metreeca.rest.services._Engine.engine;

import static java.util.UUID.randomUUID;


/**
 * Resource creator.
 *
 * <p>Handles creation requests on the linked data container identified by the request {@linkplain Request#item() focus
 * item}, according to the following operating modes.</p>
 *
 * <p>If the request target is a {@linkplain Request#container() container}</p>
 *
 * <ul>
 *
 * <li>the request {@linkplain Message#shape() shape} is redacted taking into account request user
 * {@linkplain Request#roles() roles}, {@link Shape#create}
 * task, {@link Shape#convey} mode and {@link Shape#detail} view;</li>
 *
 * <li>the request body is expected to contain a description of the resource to be created matched by the redacted shape; content outside this envelope is reported with a {@linkplain Response#UnprocessableEntity} status code and a structured {@linkplain Failure#trace(JsonValue) trace} element.</li>
 *
 * </ul>
 *
 * <p>Otherwise:</p>
 *
 * <ul>
 *
 * <li>the request is reported with a {@linkplain Response#NotImplemented} status code.</li>
 *
 * </ul>
 *
 * <p>On successful body validation:</p>
 *
 * <ul>
 *
 * <li>the resource to be created is assigned a unique identifier based on the stem of the stem of the request focus item and a name generated by either the default {@linkplain #uuid() UUID-based} or a {@linkplain #Creator(Function) custom-provided} name generator;</li>
 *
 * </ul>
 *
 * <p>On successful resource creation, the IRI of the newly created resource is advertised through the {@code Location}
 * HTTP response header.</p>
 *
 * @see <a href="https://www.w3.org/Submission/CBD/">CBD - Concise Bounded Description</a>
 */
public final class Creator extends Delegator {

	/**
	 * Creates a random UUID-based slug generator.
	 *
	 * @return a slug generator returning a new random UUID for each call
	 */
	public static Function<Request, String> uuid() {
		return request -> randomUUID().toString();
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	/*
	 * Shared lock for taming serialization issues with slug operations (snapshot graph txns may produce conflicts).
	 */
	private final Object lock=new Object();

	private final Function<Request, String> slug;


	private final _Engine engine=service(engine());
	private final Logger logger=service(logger());


	/**
	 * Creates a resource creator with a {@linkplain #uuid() UUID} slug generator.
	 */
	public Creator() {
		this(uuid());
	}

	/**
	 * Creates a resource creator.
	 *
	 * @param slug a function mapping from the creation request to the name to be assigned to the newly created
	 *             resource; must return a non-null and non-empty value; names clashing with existing resources are
	 *             reported with a {@linkplain Response#Conflict} status code and a structured {@linkplain
	 *             Failure#trace(JsonValue) trace} element
	 *
	 * @throws NullPointerException if {@code slug} is null
	 */
	public Creator(final Function<Request, String> slug) {

		if ( slug == null ) {
			throw new NullPointerException("null slug");
		}

		this.slug=slug;

		//delegate(creator()
		//		.with(throttler())
		//		.with(connector())
		//);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//private Wrapper throttler() {
	//	return new Throttler(Shape.create, Shape.detail, Shapes::resource);
	//}

	//private Wrapper connector() {
	//	return handler -> request -> engine.exec(() -> handler.handle(request));
	//}

	//private Handler creator() {
	//	return request -> {
	//		synchronized ( lock ) { // attempt to serialize slug operations from multiple snapshot txns
	//
	//			final String name=slug.apply(request);
	//
	//			if ( name == null ) {
	//				throw new NullPointerException("null resource name");
	//			}
	//
	//			if ( name.isEmpty() ) {
	//				throw new IllegalArgumentException("empty resource name");
	//			}
	//
	//			final IRI container=request.item();
	//			final IRI resource=iri(request.stem(), name);
	//
	//			final Shape shape=container(container, request.shape());
	//			final Collection<Statement> model=rewrite(resource, container, logger.trace(this, rdf));
	//
	//			// !!! recognize txns failures due to conflicting user-supplied slugs and report as 409 Conflict
	//
	//			return request.reply(response -> engine.create(resource, shape, model)
	//
	//					.map(focus -> focus.assess(Level.Error) // shape violations
	//
	//							? response.map(new Failure()
	//							.status(Response.UnprocessableEntity)
	//							.error(Failure.DataInvalid)
	//							.trace(focus))
	//
	//							: response
	//							.status(Response.Created)
	//							.header("Location", resource.stringValue())
	//
	//					)
	//
	//					.orElseGet(() -> {
	//
	//						logger.error(this, format("conflicting slug {%s}", resource));
	//
	//						return response.map(new Failure()
	//								.status(Response.InternalServerError)
	//								.cause("see server logs for details")
	//						);
	//
	//					})
	//
	//			);
	//
	//		}
	//	};
	//
	//}

}
