/*
 * Copyright Â© 2013-2019 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca/Link.
 *
 * Metreeca/Link is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca/Link is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca/Link.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest.handlers;


import com.metreeca.rest.*;
import com.metreeca.rest.services.Engine;
import com.metreeca.tree.Shape;

import java.util.Objects;
import java.util.function.Function;

import javax.json.JsonValue;

import static com.metreeca.rest.Context.service;
import static com.metreeca.rest.services.Engine.engine;

import static java.util.UUID.randomUUID;


/**
 * Model-driven resource creator.
 *
 * <p>Handles creation requests on the linked data container identified by the request {@linkplain Request#item() focus
 * item}, according to the following operating modes.</p>
 *
 * <p>If the request target is a {@linkplain Request#container() container}</p>
 *
 * <ul>
 *
 * <li>the request {@linkplain Message#shape() shape} is redacted taking into account request user
 * {@linkplain Request#roles() roles}, {@link Shape#Create}
 * task, {@link Shape#Convey} mode and {@link Shape#Detail} view;</li>
 *
 * <li>the request body is expected to contain a description of the resource to be created matched by the redacted
 * shape; content outside this envelope is reported with a {@linkplain Response#UnprocessableEntity} status code and a
 * structured {@linkplain Failure#trace(JsonValue) trace} element.</li>
 *
 * </ul>
 *
 * <p>Otherwise:</p>
 *
 * <ul>
 *
 * <li>the request is reported with a {@linkplain Response#NotImplemented} status code.</li>
 *
 * </ul>
 *
 * <p>On successful body validation:</p>
 *
 * <ul>
 *
 * <li>the resource to be created is assigned a unique identifier based on the stem of the stem of the request focus
 * item and a name generated by either the default {@linkplain #Creator() UUID-based} or a
 * {@linkplain #Creator(Function) custom-provided} name generator;</li>
 *
 * </ul>
 *
 * <p>On successful resource creation, the IRI of the newly created resource is advertised through the {@code Location}
 * HTTP response header.</p>
 *
 * @see <a href="https://www.w3.org/Submission/CBD/">CBD - Concise Bounded Description</a>
 */
public final class Creator extends Delegator {

	private final Engine engine=service(engine());


	/**
	 * Creates a resource creator with a UUID-based slug generator.
	 */
	public Creator() {
		this(request -> randomUUID().toString());
	}

	/**
	 * Creates a resource creator.
	 *
	 * @param slug a function mapping from the creation request to the name to be assigned to the newly created
	 *             resource; must return a non-null unique value
	 *
	 * @throws NullPointerException if {@code slug} is null
	 */
	public Creator(final Function<Request, String> slug) {

		if ( slug == null ) {
			throw new NullPointerException("null slug");
		}

		delegate(engine

				.with(handler -> request -> {

					synchronized ( engine ) { // attempt to serialize slug operations from multiple snapshot txns
						return engine.exec(() -> handler.handle(request)); // inside a single txn
					}

				})

				.with(handler -> request -> handler.handle(request.header("Slug",
						Objects.requireNonNull(slug.apply(request), "null resource name")
				)))

		);
	}

}
