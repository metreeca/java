/*
 * Copyright Â© 2013-2019 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest;

import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;

import static java.util.Objects.requireNonNull;


/**
 * HTTP processing result.
 *
 * <p>Describes the result of an HTTP request processing operation that could either successfully return a value or
 * report a failure.</p>
 *
 * @param <V> the type of the value possibly returned by the operation
 */
public interface Result<V> {

	/**
	 * Creates an operation result with a returned value.
	 *
	 * @param value the value returned by the operation
	 * @param <V>   the type of the value returned by the operation
	 *
	 * @return a result providing access to the value returned by the operation
	 */
	public static <V> Result<V> value(final V value) {

		if ( value == null ) {
			throw new NullPointerException("null value");
		}

		return new Result<V>() {
			@Override public <R> R map(final Function<V, R> success, final Function<Failure<V>, R> failure) {

				if ( success == null ) {
					throw new NullPointerException("null success mapper");
				}

				if ( failure == null ) {
					throw new NullPointerException("null failure mapper");
				}

				return requireNonNull(success.apply(value), "null mapper return value");
			}
		};
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Retrieves the operation returned value.
	 *
	 * @return an optional operation returned value, if one is present; an empty optional, otherwise
	 */
	public default Optional<V> get() {
		return map(Optional::of, f -> Optional.empty());
	}

	/**
	 * Handles the operation returned value.
	 *
	 * @param success a consumer accepting the operation returned value; invoked only if a value was actually returned
	 *                by the operation
	 *
	 * @return this result
	 *
	 * @throws NullPointerException if {@code success} or is null
	 */
	public default Result<V> use(final Consumer<V> success) {

		if ( success == null ) {
			throw new NullPointerException("null success consumer");
		}

		return use(success, failure -> {});
	}

	/**
	 * Maps the operation returned value.
	 *
	 * @param mapper the value mapping function
	 * @param <R>    the type of the mapped returned value
	 *
	 * @return a result providing access to the value generated by applying {@code mapper} to the returned value of this
	 * result, if one was present; a result providing access to the reported failure of this result, otherwise
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public default <R> Result<R> map(final Function<V, R> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return flatMap(v -> value(requireNonNull(mapper.apply(v), "null mapper return value")));
	}

	/**
	 * Maps the operation returned value.
	 *
	 * @param mapper the value mapping function
	 * @param <R>    the type of the mapped returned value
	 *
	 * @return the result generated by applying {@code mapper} to the returned value of this result, if one was present;
	 * a result providing access to the reported failure of this result, otherwise
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public default <R> Result<R> flatMap(final Function<V, Result<R>> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return map(v -> requireNonNull(mapper.apply(v), "null mapper return value"), Failure::as);
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Handles operations results.
	 *
	 * @param success a consumer accepting the operation returned value
	 * @param failure a consumer accepting the operation reported failure
	 *
	 * @return this result
	 *
	 * @throws NullPointerException if either {@code success} or {@code failure} is null
	 */
	public default Result<V> use(final Consumer<V> success, final Consumer<Failure<V>> failure) {

		if ( success == null ) {
			throw new NullPointerException("null success consumer");
		}

		if ( failure == null ) {
			throw new NullPointerException("null failure consumer");
		}

		return map(
				v -> {
					success.accept(v);
					return this;
				},
				e -> {
					failure.accept(e);
					return this;
				}
		);
	}

	/**
	 * Maps operation results.
	 *
	 * @param success a function mapping from the returned value to the final operation outcome
	 * @param failure a function mapping from the reported failure to the final operation outcome
	 * @param <R>     the type of the final operation outcome
	 *
	 * @return the final operation outcome, as generated by either {@code success} or {@code failure} according to the
	 * result state
	 *
	 * @throws NullPointerException if either {@code success} or {@code failure} is null or returns a null value
	 */
	public abstract <R> R map(final Function<V, R> success, final Function<Failure<V>, R> failure);

}
