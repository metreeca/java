/*
 * Copyright Â© 2013-2018 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.rest;

import java.util.function.Consumer;
import java.util.function.Function;

import static java.util.Objects.requireNonNull;


/**
 * Lazy response provider.
 *
 * <p>Manages lazy response generation, supporting for instance request processing inside database transactions and
 * streaming response generation inside ephemeral database connections.</p>
 */
@FunctionalInterface public interface Responder {

	/**
	 * Connects a consumer to this responder.
	 *
	 * @param consumer the target response consumer
	 */
	public void accept(final Consumer<Response> consumer);


	/**
	 * Maps this response provider.
	 *
	 * @param mapper the response mapping function; must return a non-null value
	 *
	 * @return a new reponder providing a response obtained by applying {@code mapper} to the response generated by this
	 * responder
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public default Responder map(final Function<Response, Response> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return consumer -> accept(response -> consumer.accept(
				requireNonNull(mapper.apply(response), "null mapper return value"))
		);
	}

}
