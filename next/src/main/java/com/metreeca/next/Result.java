/*
 * Copyright Â© 2013-2018 Metreeca srl. All rights reserved.
 *
 * This file is part of Metreeca.
 *
 * Metreeca is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or(at your option) any later version.
 *
 * Metreeca is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with Metreeca.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.metreeca.next;

import java.util.Optional;
import java.util.function.Function;

import static java.util.Objects.requireNonNull;


/**
 * Operation result.
 *
 * <p>Describes the result of an operation that could either return a value or report an error.</p>
 *
 * @param <V> the type of the value returned by the operation
 * @param <E> the type of the error reported by the operation
 */
@FunctionalInterface public interface Result<V, E> {

	/**
	 * Creates a value operation result.
	 *
	 * @param v   the value returned by the operation
	 * @param <V> the type of the value returned by the operation
	 * @param <E> the type of the error reported by the operation
	 *
	 * @return a result providing access to the value returned by the operation
	 */
	public static <V, E> Result<V, E> value(final V v) {

		if ( v == null ) {
			throw new NullPointerException("null value");
		}

		return new Result<V, E>() {
			@Override public <R> R result(final Function<V, R> value, final Function<E, R> error) {
				return value.apply(v);
			}
		};
	}

	/**
	 * Creates an error operation result.
	 *
	 * @param e   the error reported by the operation
	 * @param <V> the type of the value returned by the operation
	 * @param <E> the type of the error reported by the operation
	 *
	 * @return a result providing access to the error reported by the operation
	 */

	public static <V, E> Result<V, E> error(final E e) {

		if ( e == null ) {
			throw new NullPointerException("null error");
		}

		return new Result<V, E>() {
			@Override public <R> R result(final Function<V, R> value, final Function<E, R> error) {
				return error.apply(e);
			}
		};
	}


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Handles the operation result.
	 *
	 * @param value a function mapping from the returned value to the final operation outcome
	 * @param error a function mapping from the reported error to the final operation outcome
	 * @param <R>   the type of the final operation outcome
	 *
	 * @return the final operation outcome, as generated by either {@code value} or {@code error} according to the
	 * result state
	 */
	public <R> R result(final Function<V, R> value, final Function<E, R> error);


	/**
	 * Retrieves the operation returned value.
	 *
	 * @return an optional operation returned value, if one is present; an empty optional, otherwise
	 */
	public default Optional<V> value() {
		return result(Optional::of, e -> Optional.empty());
	}

	/**
	 * Retrieves the operation reported error.
	 *
	 * @return an optional operation reported error, if one is present; an empty optional, otherwise
	 */
	public default Optional<E> error() {
		return result(v -> Optional.empty(), Optional::of);
	}


	/**
	 * Maps the operation returned value.
	 *
	 * @param mapper the value mapping function
	 * @param <R>    the type of the mapped returned value
	 *
	 * @return the result generated by applying {@code mapper} to the returned value of this result, if one was present;
	 * a result providing access to the reported error of this result, otherwise
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public default <R> Result<R, E> value(final Function<V, Result<R, E>> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return result(v -> requireNonNull(mapper.apply(v), "null mapper return value"), Result::error);
	}

	/**
	 * Maps the operation reported error.
	 *
	 * @param mapper the error mapping function
	 * @param <R>    the type of the mapped reported error
	 *
	 * @return the result generated by applying {@code mapper} to the reported error of this result, if one was present;
	 * a result providing access to the returned value of this result, otherwise
	 *
	 * @throws NullPointerException if {@code mapper} is null or returns a null value
	 */
	public default <R> Result<V, R> error(final Function<E, Result<V, R>> mapper) {

		if ( mapper == null ) {
			throw new NullPointerException("null mapper");
		}

		return result(Result::value, e -> requireNonNull(mapper.apply(e), "null mapper return value"));
	}

}
